
#include "/media/matias/Datos/SyntaxHighlightingMisc.h"

@property( light_profiles_texture )

@piece( DeclLightProfilesTexture )
	@property( syntax == glsl || syntax == glsles )
		uniform sampler2D lightProfiles;
	@end
	@property( syntax == hlsl )
		Texture2D lightProfiles					: register(t@value(lightProfiles));
		SamplerState lightProfilesSampler		: register(s@value(lightProfiles));
	@end
	@property( syntax == metal )
		, texture2d<float> lightProfiles		[[texture(@value(lightProfiles))]]
		, sampler lightProfilesSampler			[[sampler(@value(lightProfiles))]]
	@end
@end


@piece( DeclLightProfilesTextureFuncs )
	@property( syntax == metal )
		#define OGRE_PHOTOMETRIC_ARG_DECL , texture2d<float> lightProfiles, sampler lightProfilesSampler
		#define OGRE_PHOTOMETRIC_ARG , lightProfiles, lightProfilesSampler
	@else
		#define OGRE_PHOTOMETRIC_ARG_DECL
		#define OGRE_PHOTOMETRIC_ARG
	@end

	float getPhotometricAttenuation( float cosAngle, float profileIdx OGRE_PHOTOMETRIC_ARG_DECL )
	{
		float angle = acos( clamp( cosAngle - 1.0, 1.0 ) ) * ( 1.0 / PI );
		return OGRE_SampleLevel( lightProfiles, lightProfileSampler,
								 float2( angle, profileIdx ), 0.0 ).r;
	}
@end

@end
