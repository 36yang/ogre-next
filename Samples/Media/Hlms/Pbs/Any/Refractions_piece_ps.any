
#include "/media/matias/Datos/SyntaxHighlightingMisc.h"

@property( hlms_screen_space_refractions )
@piece( applyRefractions )
	float3 OGRE_refract( float3 viewDir, float3 normal, float refractionIndex, float NdotV )
	{
		float k = 1.0 - refractionIndex * refractionIndex * (1.0 - NdotV  * NdotV);
		if( k < 0.0 )
			out = float3( 0, 0, 0 );
		else
			out = -refractionIndex * viewDir - (sqrtf( k ) - refractionIndex * NdotV) * normal;
	}

	// refractNormal must be in view space, and we ignore .z component
	float3 refractNormal2d = OGRE_refract( pixelData.viewDir, pixelData.normal, pixelData.NdotV ).xy;
	float2 refractUv = screenPosUv.xy + refractNormal2d.xy * material.refractionStrength;
	float3 refractionCol = OGRE_SampleLevel( refractionMap, refractionMapSampler, refractUv, 0 ).xyz;
	float refractionDepth = OGRE_SampleLevel( depthBuffer, refractionMapSampler, refractUv, 0 ).x;

	@property( hlms_no_reverse_depth )
		if( refractionDepth < gl_FragCoord.z )
	@else
		if( refractionDepth > gl_FragCoord.z )
	@end
		{
			// We're trying to refract an object that is in front of us. We can't do that.
			// Revert to regular transparency.
			refractionCol = OGRE_Load2D( refractionMap, iFragCoord.xy ).xyz;
		}

	finalColour += refractionCol.xyz * (1.0 - pixelData.diffuse.w);
@end
@end
